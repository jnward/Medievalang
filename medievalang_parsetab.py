
# medievalang_parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQLEleftPLUSMINUSleftTIMESDIVIDErightUMINUSNOTINTEGER ID WHO SEND WORD EXCLAIM GALLANTRY IF WHILE NOT DECLARE PLUS MINUS TIMES DIVIDE BLOCK IS WATCHES THE ENDBLOCK AND TO WITH PLAN AN ALOWER A DEVISED CASTLE OF BEGINS AS LONG LE EQ NOW S FOR ASCENDS FROM CONSPIRES BETRAYS DEFEATS SURRENDERS\n    program : stmt_list\n    \n    stmt_list : stmt stmt_list\n              | empty\n    \n    stmt : A PLAN IS DEVISED TO ID THE CASTLE opt_of opt_formal_args \':\' stmt\n         | DECLARE ID opt_init opt_end\n         | ID IS opt_to exp opt_end\n         | ID WATCHES opt_to exp opt_end\n         | ID BEGINS opt_to exp opt_end\n         | WHO IS ID \'?\'\n         | EXCLAIM THE GALLANTRY OF exp opt_end\n         | NOW \',\' ID THE CASTLE opt_of opt_actual_args opt_end\n         | SEND WORD OF opt_exp opt_end\n         | WHILE AS LONG AS exp ellipsis stmt\n         | IF exp ellipsis stmt opt_else\n         | BLOCK \',\' stmt_list \',\' ENDBLOCK opt_end\n         | FOR ID ASCENDS FROM exp TO exp ellipsis stmt\n         | ID opt_prep iterator exp opt_end\n    \n    opt_gallantry : "\'" S GALLANTRY\n                  | empty\n    \n    opt_to : TO\n           | empty\n    \n    opt_of : OF\n           | empty\n    \n    opt_formal_args : formal_args\n                    | empty\n    \n    iterator : CONSPIRES opt_prep\n             | BETRAYS\n             | DEFEATS\n             | SURRENDERS opt_prep\n    \n    formal_args : ID comma_and formal_args\n                | ID\n    \n    comma_and : \',\'\n              | opt_oxford AND\n    \n    opt_oxford : \',\'\n               | empty\n    \n    opt_init : \'=\' exp\n             | empty\n    \n    opt_actual_args : actual_args\n                    | empty\n    \n    actual_args : exp comma_and actual_args\n                | exp\n    \n    opt_exp : exp\n            | empty\n    \n    opt_else : IF NOT ellipsis stmt\n             | empty\n    \n    exp : exp opt_gallantry PLUS opt_prep exp opt_gallantry \n        | exp opt_gallantry MINUS opt_prep exp opt_gallantry \n        | exp opt_gallantry TIMES opt_prep exp opt_gallantry \n        | exp opt_gallantry DIVIDE opt_prep exp opt_gallantry \n        | exp opt_gallantry EQ opt_prep exp opt_gallantry \n        | exp opt_gallantry LE opt_prep exp opt_gallantry \n    \n    opt_prep : WITH\n             | TO\n             | empty\n    \n    opt_article : ALOWER\n                | AN\n                | THE\n                | empty\n    \n    exp : opt_article INTEGER\n    \n    exp : ID\n    \n    exp : ID THE CASTLE OF opt_actual_args\n    \n    exp : MINUS exp %prec UMINUS\n    \n    exp : NOT exp\n    \n    opt_end : \'.\'\n            | \'!\'\n            | empty\n    \n    ellipsis : \'.\' \'.\' \'.\'\n    \n    empty :\n    '
    
_lr_action_items = {'A':([0,3,25,34,40,53,55,59,61,65,66,67,69,73,74,75,76,79,80,81,82,83,84,87,88,89,91,104,105,106,107,108,109,110,111,114,115,122,123,124,125,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,153,154,155,162,163,164,166,168,175,177,],[5,5,-68,-60,5,-68,-37,-68,5,-19,-62,-59,-63,-68,-68,-68,-68,-5,-64,-65,-66,-36,-9,-68,-42,-43,-68,-6,-66,-7,-8,-17,-68,-68,-12,-14,-45,-67,-18,-68,-68,-10,-68,-22,-23,5,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,-15,-68,-13,5,-46,-47,-48,-49,-50,-51,-11,-44,-40,5,-16,5,-4,]),'DECLARE':([0,3,25,34,40,53,55,59,61,65,66,67,69,73,74,75,76,79,80,81,82,83,84,87,88,89,91,104,105,106,107,108,109,110,111,114,115,122,123,124,125,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,153,154,155,162,163,164,166,168,175,177,],[7,7,-68,-60,7,-68,-37,-68,7,-19,-62,-59,-63,-68,-68,-68,-68,-5,-64,-65,-66,-36,-9,-68,-42,-43,-68,-6,-66,-7,-8,-17,-68,-68,-12,-14,-45,-67,-18,-68,-68,-10,-68,-22,-23,7,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,-15,-68,-13,7,-46,-47,-48,-49,-50,-51,-11,-44,-40,7,-16,7,-4,]),'ID':([0,3,7,13,15,18,19,20,22,23,24,25,26,28,32,34,36,40,43,44,45,46,47,48,49,50,51,52,53,54,55,59,61,65,66,67,69,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,89,90,91,92,93,94,95,96,97,102,103,104,105,106,107,108,109,110,111,114,115,116,117,118,119,120,121,122,123,124,125,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,145,147,148,149,150,151,152,153,154,155,156,157,161,162,163,164,165,166,167,168,173,175,177,],[6,6,25,34,41,-68,-68,-68,-52,-53,-54,-68,56,58,34,-60,34,6,34,-20,-21,34,34,34,-68,-27,-28,-68,-68,34,-37,34,6,-19,-62,-59,-63,-68,-68,-68,-68,-26,-29,-5,-64,-65,-66,-36,-9,34,-68,-42,-43,34,-68,-68,-68,-68,-68,-68,-68,34,127,-6,-66,-7,-8,-17,-68,-68,-12,-14,-45,34,34,34,34,34,34,-67,-18,34,-68,-10,34,-22,-23,6,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,-15,34,-68,-13,6,-46,-47,-48,-49,-50,-51,34,-32,-68,-11,-44,-40,-33,6,169,-16,169,6,-4,]),'WHO':([0,3,25,34,40,53,55,59,61,65,66,67,69,73,74,75,76,79,80,81,82,83,84,87,88,89,91,104,105,106,107,108,109,110,111,114,115,122,123,124,125,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,153,154,155,162,163,164,166,168,175,177,],[8,8,-68,-60,8,-68,-37,-68,8,-19,-62,-59,-63,-68,-68,-68,-68,-5,-64,-65,-66,-36,-9,-68,-42,-43,-68,-6,-66,-7,-8,-17,-68,-68,-12,-14,-45,-67,-18,-68,-68,-10,-68,-22,-23,8,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,-15,-68,-13,8,-46,-47,-48,-49,-50,-51,-11,-44,-40,8,-16,8,-4,]),'EXCLAIM':([0,3,25,34,40,53,55,59,61,65,66,67,69,73,74,75,76,79,80,81,82,83,84,87,88,89,91,104,105,106,107,108,109,110,111,114,115,122,123,124,125,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,153,154,155,162,163,164,166,168,175,177,],[9,9,-68,-60,9,-68,-37,-68,9,-19,-62,-59,-63,-68,-68,-68,-68,-5,-64,-65,-66,-36,-9,-68,-42,-43,-68,-6,-66,-7,-8,-17,-68,-68,-12,-14,-45,-67,-18,-68,-68,-10,-68,-22,-23,9,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,-15,-68,-13,9,-46,-47,-48,-49,-50,-51,-11,-44,-40,9,-16,9,-4,]),'NOW':([0,3,25,34,40,53,55,59,61,65,66,67,69,73,74,75,76,79,80,81,82,83,84,87,88,89,91,104,105,106,107,108,109,110,111,114,115,122,123,124,125,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,153,154,155,162,163,164,166,168,175,177,],[10,10,-68,-60,10,-68,-37,-68,10,-19,-62,-59,-63,-68,-68,-68,-68,-5,-64,-65,-66,-36,-9,-68,-42,-43,-68,-6,-66,-7,-8,-17,-68,-68,-12,-14,-45,-67,-18,-68,-68,-10,-68,-22,-23,10,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,-15,-68,-13,10,-46,-47,-48,-49,-50,-51,-11,-44,-40,10,-16,10,-4,]),'SEND':([0,3,25,34,40,53,55,59,61,65,66,67,69,73,74,75,76,79,80,81,82,83,84,87,88,89,91,104,105,106,107,108,109,110,111,114,115,122,123,124,125,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,153,154,155,162,163,164,166,168,175,177,],[11,11,-68,-60,11,-68,-37,-68,11,-19,-62,-59,-63,-68,-68,-68,-68,-5,-64,-65,-66,-36,-9,-68,-42,-43,-68,-6,-66,-7,-8,-17,-68,-68,-12,-14,-45,-67,-18,-68,-68,-10,-68,-22,-23,11,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,-15,-68,-13,11,-46,-47,-48,-49,-50,-51,-11,-44,-40,11,-16,11,-4,]),'WHILE':([0,3,25,34,40,53,55,59,61,65,66,67,69,73,74,75,76,79,80,81,82,83,84,87,88,89,91,104,105,106,107,108,109,110,111,114,115,122,123,124,125,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,153,154,155,162,163,164,166,168,175,177,],[12,12,-68,-60,12,-68,-37,-68,12,-19,-62,-59,-63,-68,-68,-68,-68,-5,-64,-65,-66,-36,-9,-68,-42,-43,-68,-6,-66,-7,-8,-17,-68,-68,-12,-14,-45,-67,-18,-68,-68,-10,-68,-22,-23,12,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,-15,-68,-13,12,-46,-47,-48,-49,-50,-51,-11,-44,-40,12,-16,12,-4,]),'IF':([0,3,25,34,40,53,55,59,61,65,66,67,69,73,74,75,76,79,80,81,82,83,84,87,88,89,91,104,105,106,107,108,109,110,111,114,115,122,123,124,125,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,153,154,155,162,163,164,166,168,175,177,],[13,13,-68,-60,13,-68,-37,-68,13,-19,-62,-59,-63,-68,-68,-68,-68,-5,-64,-65,-66,-36,-9,-68,-42,-43,113,-6,-66,-7,-8,-17,-68,-68,-12,-14,-45,-67,-18,-68,-68,-10,-68,-22,-23,13,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,-15,-68,-13,13,-46,-47,-48,-49,-50,-51,-11,-44,-40,13,-16,13,-4,]),'BLOCK':([0,3,25,34,40,53,55,59,61,65,66,67,69,73,74,75,76,79,80,81,82,83,84,87,88,89,91,104,105,106,107,108,109,110,111,114,115,122,123,124,125,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,153,154,155,162,163,164,166,168,175,177,],[14,14,-68,-60,14,-68,-37,-68,14,-19,-62,-59,-63,-68,-68,-68,-68,-5,-64,-65,-66,-36,-9,-68,-42,-43,-68,-6,-66,-7,-8,-17,-68,-68,-12,-14,-45,-67,-18,-68,-68,-10,-68,-22,-23,14,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,-15,-68,-13,14,-46,-47,-48,-49,-50,-51,-11,-44,-40,14,-16,14,-4,]),'FOR':([0,3,25,34,40,53,55,59,61,65,66,67,69,73,74,75,76,79,80,81,82,83,84,87,88,89,91,104,105,106,107,108,109,110,111,114,115,122,123,124,125,128,129,130,131,132,134,135,136,137,138,139,140,141,142,143,144,147,148,149,150,151,152,153,154,155,162,163,164,166,168,175,177,],[15,15,-68,-60,15,-68,-37,-68,15,-19,-62,-59,-63,-68,-68,-68,-68,-5,-64,-65,-66,-36,-9,-68,-42,-43,-68,-6,-66,-7,-8,-17,-68,-68,-12,-14,-45,-67,-18,-68,-68,-10,-68,-22,-23,15,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,-15,-68,-13,15,-46,-47,-48,-49,-50,-51,-11,-44,-40,15,-16,15,-4,]),'$end':([0,1,2,3,4,16,25,34,53,55,59,65,66,67,69,73,74,75,76,79,80,81,82,83,84,87,88,89,91,104,105,106,107,108,109,110,111,114,115,123,124,125,128,129,130,131,134,135,136,137,138,139,140,141,142,143,144,147,148,150,151,152,153,154,155,162,163,164,168,177,],[-68,0,-1,-68,-3,-2,-68,-60,-68,-37,-68,-19,-62,-59,-63,-68,-68,-68,-68,-5,-64,-65,-66,-36,-9,-68,-42,-43,-68,-6,-66,-7,-8,-17,-68,-68,-12,-14,-45,-18,-68,-68,-10,-68,-22,-23,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,-15,-68,-13,-46,-47,-48,-49,-50,-51,-11,-44,-40,-16,-4,]),',':([3,4,10,14,16,25,34,40,53,55,59,65,66,67,69,70,73,74,75,76,79,80,81,82,83,84,87,88,89,91,104,105,106,107,108,109,110,111,114,115,123,124,125,128,129,130,131,134,135,136,137,138,139,140,141,142,143,144,147,148,150,151,152,153,154,155,162,163,164,168,169,177,],[-68,-3,28,40,-2,-68,-60,-68,-68,-37,-68,-19,-62,-59,-63,101,-68,-68,-68,-68,-5,-64,-65,-66,-36,-9,-68,-42,-43,-68,-6,-66,-7,-8,-17,-68,-68,-12,-14,-45,-18,-68,-68,-10,-68,-22,-23,-68,-68,-68,-68,-68,-68,-61,-38,-39,157,-15,-68,-13,-46,-47,-48,-49,-50,-51,-11,-44,-40,-16,157,-4,]),'PLAN':([5,],[17,]),'IS':([6,8,17,],[18,26,42,]),'WATCHES':([6,],[19,]),'BEGINS':([6,],[20,]),'WITH':([6,49,52,92,93,94,95,96,97,],[22,22,22,22,22,22,22,22,22,]),'TO':([6,18,19,20,34,49,52,65,66,67,69,72,92,93,94,95,96,97,123,124,126,134,135,136,137,138,139,140,141,142,143,150,151,152,153,154,155,164,],[23,44,44,44,-60,23,23,-19,-62,-59,-63,103,23,23,23,23,23,23,-18,-68,145,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,-46,-47,-48,-49,-50,-51,-40,]),'CONSPIRES':([6,21,22,23,24,],[-68,49,-52,-53,-54,]),'BETRAYS':([6,21,22,23,24,],[-68,50,-52,-53,-54,]),'DEFEATS':([6,21,22,23,24,],[-68,51,-52,-53,-54,]),'SURRENDERS':([6,21,22,23,24,],[-68,52,-52,-53,-54,]),'THE':([9,13,18,19,20,22,23,24,32,34,36,43,44,45,46,47,48,49,50,51,52,54,58,59,77,78,85,90,92,93,94,95,96,97,102,110,116,117,118,119,120,121,124,127,129,130,131,145,156,157,165,],[27,35,-68,-68,-68,-52,-53,-54,35,68,35,35,-20,-21,35,35,35,-68,-27,-28,-68,35,86,35,-26,-29,35,35,-68,-68,-68,-68,-68,-68,35,-68,35,35,35,35,35,35,35,146,35,-22,-23,35,35,-32,-33,]),'WORD':([11,],[29,]),'AS':([12,60,],[30,90,]),'MINUS':([13,18,19,20,22,23,24,31,32,34,36,43,44,45,46,47,48,49,50,51,52,54,59,62,65,66,67,69,73,74,75,76,77,78,83,85,88,90,92,93,94,95,96,97,102,105,109,110,112,116,117,118,119,120,121,123,124,126,129,130,131,134,135,136,137,138,139,140,141,142,143,145,150,151,152,153,154,155,156,157,159,160,164,165,],[32,-68,-68,-68,-52,-53,-54,-68,32,-60,32,32,-20,-21,32,32,32,-68,-27,-28,-68,32,32,93,-19,-62,-59,-63,-68,-68,-68,-68,-26,-29,-68,32,-68,32,-68,-68,-68,-68,-68,-68,32,-19,-68,-68,-68,32,32,32,32,32,32,-18,32,-68,32,-22,-23,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,32,-46,-47,-48,-49,93,93,32,-32,-19,-68,-40,-33,]),'NOT':([13,18,19,20,22,23,24,32,36,43,44,45,46,47,48,49,50,51,52,54,59,77,78,85,90,92,93,94,95,96,97,102,110,113,116,117,118,119,120,121,124,129,130,131,145,156,157,165,],[36,-68,-68,-68,-52,-53,-54,36,36,36,-20,-21,36,36,36,-68,-27,-28,-68,36,36,-26,-29,36,36,-68,-68,-68,-68,-68,-68,36,-68,133,36,36,36,36,36,36,36,36,-22,-23,36,36,-32,-33,]),'ALOWER':([13,18,19,20,22,23,24,32,36,43,44,45,46,47,48,49,50,51,52,54,59,77,78,85,90,92,93,94,95,96,97,102,110,116,117,118,119,120,121,124,129,130,131,145,156,157,165,],[37,-68,-68,-68,-52,-53,-54,37,37,37,-20,-21,37,37,37,-68,-27,-28,-68,37,37,-26,-29,37,37,-68,-68,-68,-68,-68,-68,37,-68,37,37,37,37,37,37,37,37,-22,-23,37,37,-32,-33,]),'AN':([13,18,19,20,22,23,24,32,36,43,44,45,46,47,48,49,50,51,52,54,59,77,78,85,90,92,93,94,95,96,97,102,110,116,117,118,119,120,121,124,129,130,131,145,156,157,165,],[38,-68,-68,-68,-52,-53,-54,38,38,38,-20,-21,38,38,38,-68,-27,-28,-68,38,38,-26,-29,38,38,-68,-68,-68,-68,-68,-68,38,-68,38,38,38,38,38,38,38,38,-22,-23,38,38,-32,-33,]),'INTEGER':([13,18,19,20,22,23,24,32,33,35,36,37,38,39,43,44,45,46,47,48,49,50,51,52,54,59,77,78,85,89,90,92,93,94,95,96,97,102,110,116,117,118,119,120,121,124,129,130,131,142,145,156,157,165,],[-68,-68,-68,-68,-52,-53,-54,-68,67,-57,-68,-55,-56,-58,-68,-20,-21,-68,-68,-68,-68,-27,-28,-68,-68,-68,-26,-29,-68,-58,-68,-68,-68,-68,-68,-68,-68,-68,-68,-68,-68,-68,-68,-68,-68,-68,-68,-22,-23,-58,-68,-68,-32,-33,]),'=':([25,],[54,]),'.':([25,31,34,53,55,59,63,65,66,67,69,73,74,75,76,83,87,88,89,98,109,110,112,123,124,125,129,130,131,133,134,135,136,137,138,139,140,141,142,143,147,150,151,152,153,154,155,160,164,],[-68,63,-60,80,-37,-68,98,-19,-62,-59,-63,80,80,80,80,-36,80,-42,-43,122,80,-68,63,-18,-68,80,-68,-22,-23,63,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,80,-46,-47,-48,-49,-50,-51,63,-40,]),'!':([25,34,53,55,59,65,66,67,69,73,74,75,76,83,87,88,89,109,110,123,124,125,129,130,131,134,135,136,137,138,139,140,141,142,143,147,150,151,152,153,154,155,164,],[-68,-60,81,-37,-68,-19,-62,-59,-63,81,81,81,81,-36,81,-42,-43,81,-68,-18,-68,81,-68,-22,-23,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,81,-46,-47,-48,-49,-50,-51,-40,]),'GALLANTRY':([27,99,],[57,123,]),'OF':([29,57,100,110,161,],[59,85,124,130,130,]),'LONG':([30,],[60,]),"'":([31,34,65,66,67,69,73,74,75,76,83,88,109,112,123,124,126,134,135,136,137,138,139,140,141,142,143,150,151,152,153,154,155,160,164,],[64,-60,-19,-62,-59,-63,64,64,64,64,64,64,64,64,-18,-68,64,64,64,64,64,64,64,-61,-38,-39,64,-46,-47,-48,-49,-50,-51,64,-40,]),'PLUS':([31,34,62,65,66,67,69,73,74,75,76,83,88,105,109,112,123,124,126,134,135,136,137,138,139,140,141,142,143,150,151,152,153,154,155,159,160,164,],[-68,-60,92,-19,-62,-59,-63,-68,-68,-68,-68,-68,-68,-19,-68,-68,-18,-68,-68,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,-46,-47,-48,-49,92,92,-19,-68,-40,]),'TIMES':([31,34,62,65,66,67,69,73,74,75,76,83,88,105,109,112,123,124,126,134,135,136,137,138,139,140,141,142,143,150,151,152,153,154,155,159,160,164,],[-68,-60,94,-19,-62,-59,-63,-68,-68,-68,-68,-68,-68,-19,-68,-68,-18,-68,-68,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,94,94,-48,-49,94,94,-19,-68,-40,]),'DIVIDE':([31,34,62,65,66,67,69,73,74,75,76,83,88,105,109,112,123,124,126,134,135,136,137,138,139,140,141,142,143,150,151,152,153,154,155,159,160,164,],[-68,-60,95,-19,-62,-59,-63,-68,-68,-68,-68,-68,-68,-19,-68,-68,-18,-68,-68,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,95,95,-48,-49,95,95,-19,-68,-40,]),'EQ':([31,34,62,65,66,67,69,73,74,75,76,83,88,105,109,112,123,124,126,134,135,136,137,138,139,140,141,142,143,150,151,152,153,154,155,159,160,164,],[-68,-60,96,-19,-62,-59,-63,-68,-68,-68,-68,-68,-68,-19,-68,-68,-18,-68,-68,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,-46,-47,-48,-49,-50,-51,-19,-68,-40,]),'LE':([31,34,62,65,66,67,69,73,74,75,76,83,88,105,109,112,123,124,126,134,135,136,137,138,139,140,141,142,143,150,151,152,153,154,155,159,160,164,],[-68,-60,97,-19,-62,-59,-63,-68,-68,-68,-68,-68,-68,-19,-68,-68,-18,-68,-68,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,-46,-47,-48,-49,-50,-51,-19,-68,-40,]),'AND':([34,65,66,67,69,123,124,134,135,136,137,138,139,140,141,142,143,150,151,152,153,154,155,157,158,159,164,169,174,],[-60,-19,-62,-59,-63,-18,-68,-68,-68,-68,-68,-68,-68,-61,-38,-39,-41,-46,-47,-48,-49,-50,-51,-34,165,-35,-40,-68,-35,]),'ASCENDS':([41,],[71,]),'DEVISED':([42,],[72,]),'?':([56,],[84,]),'S':([64,],[99,]),'CASTLE':([68,86,146,],[100,110,161,]),'FROM':([71,],[102,]),'ENDBLOCK':([101,],[125,]),':':([130,131,161,167,169,170,171,172,176,],[-22,-23,-68,-68,-31,175,-24,-25,-30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,3,40,],[2,16,70,]),'stmt':([0,3,40,61,132,149,166,175,],[3,3,3,91,148,163,168,177,]),'empty':([0,3,6,13,18,19,20,25,31,32,36,40,43,46,47,48,49,52,53,54,59,66,69,73,74,75,76,83,85,87,88,90,91,92,93,94,95,96,97,102,109,110,112,116,117,118,119,120,121,124,125,126,129,134,135,136,137,138,139,143,145,147,156,160,161,167,169,],[4,4,24,39,45,45,45,55,65,39,39,4,39,39,39,39,24,24,82,39,89,65,65,105,105,105,105,65,39,82,65,39,115,24,24,24,24,24,24,39,105,131,65,39,39,39,39,39,39,142,82,65,142,65,65,65,65,65,65,159,39,82,39,65,131,172,174,]),'opt_prep':([6,49,52,92,93,94,95,96,97,],[21,77,78,116,117,118,119,120,121,]),'exp':([13,32,36,43,46,47,48,54,59,85,90,102,116,117,118,119,120,121,124,129,145,156,],[31,66,69,73,74,75,76,83,88,109,112,126,134,135,136,137,138,139,143,143,160,143,]),'opt_article':([13,32,36,43,46,47,48,54,59,85,90,102,116,117,118,119,120,121,124,129,145,156,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'opt_to':([18,19,20,],[43,46,47,]),'iterator':([21,],[48,]),'opt_init':([25,],[53,]),'ellipsis':([31,112,133,160,],[61,132,149,166,]),'opt_gallantry':([31,66,69,73,74,75,76,83,88,109,112,126,134,135,136,137,138,139,143,160,],[62,62,62,62,62,62,62,62,62,62,62,62,150,151,152,153,154,155,62,62,]),'opt_end':([53,73,74,75,76,87,109,125,147,],[79,104,106,107,108,111,128,144,162,]),'opt_exp':([59,],[87,]),'opt_else':([91,],[114,]),'opt_of':([110,161,],[129,167,]),'opt_actual_args':([124,129,],[140,147,]),'actual_args':([124,129,156,],[141,141,164,]),'comma_and':([143,169,],[156,173,]),'opt_oxford':([143,169,],[158,158,]),'opt_formal_args':([167,],[170,]),'formal_args':([167,173,],[171,176,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_prog','medievalang_frontend_gram.py',17),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','medievalang_frontend_gram.py',24),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','medievalang_frontend_gram.py',25),
  ('stmt -> A PLAN IS DEVISED TO ID THE CASTLE opt_of opt_formal_args : stmt','stmt',12,'p_stmt','medievalang_frontend_gram.py',35),
  ('stmt -> DECLARE ID opt_init opt_end','stmt',4,'p_stmt','medievalang_frontend_gram.py',36),
  ('stmt -> ID IS opt_to exp opt_end','stmt',5,'p_stmt','medievalang_frontend_gram.py',37),
  ('stmt -> ID WATCHES opt_to exp opt_end','stmt',5,'p_stmt','medievalang_frontend_gram.py',38),
  ('stmt -> ID BEGINS opt_to exp opt_end','stmt',5,'p_stmt','medievalang_frontend_gram.py',39),
  ('stmt -> WHO IS ID ?','stmt',4,'p_stmt','medievalang_frontend_gram.py',40),
  ('stmt -> EXCLAIM THE GALLANTRY OF exp opt_end','stmt',6,'p_stmt','medievalang_frontend_gram.py',41),
  ('stmt -> NOW , ID THE CASTLE opt_of opt_actual_args opt_end','stmt',8,'p_stmt','medievalang_frontend_gram.py',42),
  ('stmt -> SEND WORD OF opt_exp opt_end','stmt',5,'p_stmt','medievalang_frontend_gram.py',43),
  ('stmt -> WHILE AS LONG AS exp ellipsis stmt','stmt',7,'p_stmt','medievalang_frontend_gram.py',44),
  ('stmt -> IF exp ellipsis stmt opt_else','stmt',5,'p_stmt','medievalang_frontend_gram.py',45),
  ('stmt -> BLOCK , stmt_list , ENDBLOCK opt_end','stmt',6,'p_stmt','medievalang_frontend_gram.py',46),
  ('stmt -> FOR ID ASCENDS FROM exp TO exp ellipsis stmt','stmt',9,'p_stmt','medievalang_frontend_gram.py',47),
  ('stmt -> ID opt_prep iterator exp opt_end','stmt',5,'p_stmt','medievalang_frontend_gram.py',48),
  ("opt_gallantry -> ' S GALLANTRY",'opt_gallantry',3,'p_opt_gallantry','medievalang_frontend_gram.py',81),
  ('opt_gallantry -> empty','opt_gallantry',1,'p_opt_gallantry','medievalang_frontend_gram.py',82),
  ('opt_to -> TO','opt_to',1,'p_opt_to','medievalang_frontend_gram.py',87),
  ('opt_to -> empty','opt_to',1,'p_opt_to','medievalang_frontend_gram.py',88),
  ('opt_of -> OF','opt_of',1,'p_opt_of','medievalang_frontend_gram.py',93),
  ('opt_of -> empty','opt_of',1,'p_opt_of','medievalang_frontend_gram.py',94),
  ('opt_formal_args -> formal_args','opt_formal_args',1,'p_opt_formal_args','medievalang_frontend_gram.py',99),
  ('opt_formal_args -> empty','opt_formal_args',1,'p_opt_formal_args','medievalang_frontend_gram.py',100),
  ('iterator -> CONSPIRES opt_prep','iterator',2,'p_iterator','medievalang_frontend_gram.py',106),
  ('iterator -> BETRAYS','iterator',1,'p_iterator','medievalang_frontend_gram.py',107),
  ('iterator -> DEFEATS','iterator',1,'p_iterator','medievalang_frontend_gram.py',108),
  ('iterator -> SURRENDERS opt_prep','iterator',2,'p_iterator','medievalang_frontend_gram.py',109),
  ('formal_args -> ID comma_and formal_args','formal_args',3,'p_formal_args','medievalang_frontend_gram.py',115),
  ('formal_args -> ID','formal_args',1,'p_formal_args','medievalang_frontend_gram.py',116),
  ('comma_and -> ,','comma_and',1,'p_comma_and','medievalang_frontend_gram.py',125),
  ('comma_and -> opt_oxford AND','comma_and',2,'p_comma_and','medievalang_frontend_gram.py',126),
  ('opt_oxford -> ,','opt_oxford',1,'p_opt_oxford','medievalang_frontend_gram.py',132),
  ('opt_oxford -> empty','opt_oxford',1,'p_opt_oxford','medievalang_frontend_gram.py',133),
  ('opt_init -> = exp','opt_init',2,'p_opt_init','medievalang_frontend_gram.py',139),
  ('opt_init -> empty','opt_init',1,'p_opt_init','medievalang_frontend_gram.py',140),
  ('opt_actual_args -> actual_args','opt_actual_args',1,'p_opt_actual_args','medievalang_frontend_gram.py',149),
  ('opt_actual_args -> empty','opt_actual_args',1,'p_opt_actual_args','medievalang_frontend_gram.py',150),
  ('actual_args -> exp comma_and actual_args','actual_args',3,'p_actual_args','medievalang_frontend_gram.py',156),
  ('actual_args -> exp','actual_args',1,'p_actual_args','medievalang_frontend_gram.py',157),
  ('opt_exp -> exp','opt_exp',1,'p_opt_exp','medievalang_frontend_gram.py',166),
  ('opt_exp -> empty','opt_exp',1,'p_opt_exp','medievalang_frontend_gram.py',167),
  ('opt_else -> IF NOT ellipsis stmt','opt_else',4,'p_opt_else','medievalang_frontend_gram.py',173),
  ('opt_else -> empty','opt_else',1,'p_opt_else','medievalang_frontend_gram.py',174),
  ('exp -> exp opt_gallantry PLUS opt_prep exp opt_gallantry','exp',6,'p_binop_exp','medievalang_frontend_gram.py',184),
  ('exp -> exp opt_gallantry MINUS opt_prep exp opt_gallantry','exp',6,'p_binop_exp','medievalang_frontend_gram.py',185),
  ('exp -> exp opt_gallantry TIMES opt_prep exp opt_gallantry','exp',6,'p_binop_exp','medievalang_frontend_gram.py',186),
  ('exp -> exp opt_gallantry DIVIDE opt_prep exp opt_gallantry','exp',6,'p_binop_exp','medievalang_frontend_gram.py',187),
  ('exp -> exp opt_gallantry EQ opt_prep exp opt_gallantry','exp',6,'p_binop_exp','medievalang_frontend_gram.py',188),
  ('exp -> exp opt_gallantry LE opt_prep exp opt_gallantry','exp',6,'p_binop_exp','medievalang_frontend_gram.py',189),
  ('opt_prep -> WITH','opt_prep',1,'p_opt_prep','medievalang_frontend_gram.py',195),
  ('opt_prep -> TO','opt_prep',1,'p_opt_prep','medievalang_frontend_gram.py',196),
  ('opt_prep -> empty','opt_prep',1,'p_opt_prep','medievalang_frontend_gram.py',197),
  ('opt_article -> ALOWER','opt_article',1,'p_opt_article','medievalang_frontend_gram.py',202),
  ('opt_article -> AN','opt_article',1,'p_opt_article','medievalang_frontend_gram.py',203),
  ('opt_article -> THE','opt_article',1,'p_opt_article','medievalang_frontend_gram.py',204),
  ('opt_article -> empty','opt_article',1,'p_opt_article','medievalang_frontend_gram.py',205),
  ('exp -> opt_article INTEGER','exp',2,'p_integer_exp','medievalang_frontend_gram.py',210),
  ('exp -> ID','exp',1,'p_id_exp','medievalang_frontend_gram.py',216),
  ('exp -> ID THE CASTLE OF opt_actual_args','exp',5,'p_call_exp','medievalang_frontend_gram.py',222),
  ('exp -> MINUS exp','exp',2,'p_uminus_exp','medievalang_frontend_gram.py',229),
  ('exp -> NOT exp','exp',2,'p_not_exp','medievalang_frontend_gram.py',236),
  ('opt_end -> .','opt_end',1,'p_opt_end','medievalang_frontend_gram.py',243),
  ('opt_end -> !','opt_end',1,'p_opt_end','medievalang_frontend_gram.py',244),
  ('opt_end -> empty','opt_end',1,'p_opt_end','medievalang_frontend_gram.py',245),
  ('ellipsis -> . . .','ellipsis',3,'p_ellipsis','medievalang_frontend_gram.py',252),
  ('empty -> <empty>','empty',0,'p_empty','medievalang_frontend_gram.py',257),
]
